using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Linq;
using System.Web;

namespace SEMYPROJECT.Models
{
  //按Alt+回车 导入 System.Data.Entity
  // 父类: System.Data.Entity.DbContext
  public class TestDbContext : DbContext
  {
    //初始化数据库对象  【注意base参数 可以对应根下的Web.config中的连接字符串】
    //   Constructor for connecting database by connectionString's name or 
    //      a connection string.
    public TestDbContext() : base("SE2018Db") //改了串名
    {
      //Database.SetInitializer<TestDbContext>(null);
    }
    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
      base.OnModelCreating(modelBuilder);
      //移除1对多和多对多的级联关系
      // Alt + 回车 导入 *.Conventions
      modelBuilder.Conventions
        .Remove<OneToManyCascadeDeleteConvention>();
      modelBuilder.Conventions
        .Remove<ManyToManyCascadeDeleteConvention>();
    }

    //
    //① 数据库上下文类中的 DbSet<实体类名> 实体类名s {set;get;}
    //   对应数据库中的表  实体类名s
    //②  实体类【结构】对应 数据库表结构
    //③  实体类对象 对应 数据库表中的行
    //④ 实体类的Property上面通过属性/注解设置有关约束:
    // [Key]
    // [MaxLength] 和/或 [MinLength] 和/或 [StringLength(...)]
    // [Index("index_name", Order=1/2, IsUnique=true)
    // [ForeignKey(Corresponding Property-name OR Navigation object-Property's name]
    // [Display(Name="显示名称")]
    // [Required]
    // [Compare("与之比较的Property名")] Confirm-password
    // [RegularExpression("正则表达式", ErrorMessage="错误提示")]
    // [Remote("远程Action方法名", "控制器名", "区域", AdditionalFields="一起传送的Property名", ErrorMessage="")]

    //Each one of the following :
    //  mapps to a table in the database connected with the DbContext object
    //The generic type, (such as 1st one--Province in<.>
    //   ie. the class we defined in ~/Models/.)
    //  specifies the structure and
    //    some constraints( realized by attributes in [....]) for the table.
    //The object of Province mapps to a row/record in the table Provinces

    public DbSet<Province> Provinces { get; set; }
    public DbSet<City> Cities { get; set; }
    public DbSet<County> Counties { get; set; }
    public DbSet<YzuSchool> YzuSchools { get; set; }
    public DbSet<YzuMajor> YzuMajors { get; set; }
    public DbSet<Class> Classes { get; set; }
    public DbSet<Gender> Genders { get; set; }
    public DbSet<XUser> XUsers { get; set; }
    public DbSet<Student> Students { get; set; }
    public DbSet<CourseType> CourseTypes { get; set; }
    public DbSet<Course> Courses { get; set; }
    public DbSet<Score> Scores { get; set; }

    public DbSet<BookCategory> BookCategories { get; set; }
    public DbSet<Author> Authors { get; set; }
    public DbSet<Press> Presses { get; set; }
    public DbSet<BookInfo> BookInfos { get; set; }


    public DbSet<Role> Roles { get; set; }
    public DbSet<User> Users { get; set; }
    public DbSet<RoleWithControllerAction> RoleWithControllerActions { get; set; }

    public System.Data.Entity.DbSet<SEMYPROJECT.ViewModels.LoginXUserEntity> LoginXUserEntities { get; set; }

    //public System.Data.Entity.DbSet<SEMYPROJECT.ViewModels.LoginXUserEntity> LoginXUserEntities { get; set; }

    //public System.Data.Entity.DbSet<SEMYPROJECT.ViewModels.LogOnViewModel> LogOnViewModels { get; set; }


    //public DbSet<Test4Gloabal> Test4Gloabals { get; set; }

    //NuGet Package Manager Console：
    // ①PM>Enable-Migrations
    //   ◆ （First time）create 【Migrations】 directory，
    //          generate the file 【Configuration.cs】 in it.
    // ②PM>add-migration createdb
    //   ◆ 【datetime-being-created_createdb.cs】 generated automatically!
    // ③PM>update-database
    //【If the entity class is changed(type, Key and Foreign Key, index)，
    //             Do ② and ③ above to update the data in tables】
    //【Two ways to call the Seed method】
    // 【The first way: ①②③ ④⑤⑥】
    // ④ Create the file for Seed method
    //       such as ~/App_Code/TestDbInitialization class!
    //       --inherits DropCreateDatabaseAlways<TestDbContext>
    //  //set the Seed method（add data after creating the database）
    //  protected override void Seed(TestDbContext context)
    // ⑤  define 【Action method and Views】，
    //       initialize the database and create objects，
    //       then invoke the Seed method。
    // ⑥ using the browser to access the Action/View,
    //     Make sure the data is inserted to the tables。
    // ★★【The second way：① ② ④ ⑦ ③】
    //          【▲ We need not to provide action method and views】
    // ① PM>Enable-Migrations
    // ② PM>add-migration createdb
    // ④  the same as ④ above▲▲
    // ⑦ Open the file below generated by Enable-Migrations operation： 
    //    SEMYPROJECT.Migrations.Configuratioin.cs,
    //  Add two statements in the mothod 【Seed】:
    //    protected override void Seed(TestDbContext context)
    //    {
    //      //Alt+Enter: using SEMYPROJECT.App_Code namespace
    //      //【NOTICE】
    //      // ❶ If you use the following command in Package Manager: 
    //      //   【Enable-Migrations -Force】
    //      //   the Configuation.cs will be recreated。
    //      // ❷ If you use the command 【updata-database】, 
    //      //    then the Seed method will be executed again：
    //      //       the database will be recreated and data will be inserted.
    //      TestDbInitialization init =  new TestDbInitialization();
    //      init.InitializeDatabase(context);
    //    
    //    
    //      //  This method will be called after migrating to the latest version.
    //    
    //      //  You can use the DbSet<T>.AddOrUpdate() helper extension method
    //      //  to avoid creating duplicate seed data.
    //    }
    // ③ PM>update-database
  }
}